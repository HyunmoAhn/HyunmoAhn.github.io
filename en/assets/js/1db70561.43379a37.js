"use strict";(self.webpackChunkhyunmoahn_github_io=self.webpackChunkhyunmoahn_github_io||[]).push([[2325],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),h=i,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||r;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),i=t(4334);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>b});var a=t(3117),i=t(7294),r=t(4334),o=t(2466),l=t(6550),s=t(1980),p=t(7392),u=t(12);function c(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=d(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[s,p]=m({queryString:t,groupId:a}),[c,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Nk)(t);return[a,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),y=(()=>{const e=s??c;return h({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var y=t(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function A(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=u.indexOf(n),a=p[t].value;a!==l&&(c(n),s(a))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>u.push(e),onKeyDown:h,onClick:d},o,{className:(0,r.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":l===n})}),t??n)})))}function w(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function f(e){const n=g(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",k.tabList)},i.createElement(A,(0,a.Z)({},e,n)),i.createElement(w,(0,a.Z)({},e,n)))}function b(e){const n=(0,y.Z)();return i.createElement(f,(0,a.Z)({key:String(n)},e))}},9155:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var a=t(3117),i=(t(7294),t(3905)),r=t(4866),o=t(5162);const l={slug:"i18n-and-typescript",title:"i18n and typescript",description:"i18n and typescript",keywords:["i18n","typescript","web","Template Literal Types"],authors:"HyunmoAhn",tags:["i18n","typescript","template literal type"]},s=void 0,p={permalink:"/en/i18n-and-typescript",source:"@site/i18n/en/docusaurus-plugin-content-blog/2022-09-04-i18n-and-typescript.mdx",title:"i18n and typescript",description:"i18n and typescript",date:"2022-09-04T00:00:00.000Z",formattedDate:"September 4, 2022",tags:[{label:"i18n",permalink:"/en/tags/i-18-n"},{label:"typescript",permalink:"/en/tags/typescript"},{label:"template literal type",permalink:"/en/tags/template-literal-type"}],readingTime:28.305,hasTruncateMarker:!0,authors:[{name:"Hyunmo Ahn",title:"Front End Engineer @ Line Biz+",url:"https://github.com/HyunmoAhn",imageURL:"https://github.com/HyunmoAhn.png",key:"HyunmoAhn"}],frontMatter:{slug:"i18n-and-typescript",title:"i18n and typescript",description:"i18n and typescript",keywords:["i18n","typescript","web","Template Literal Types"],authors:"HyunmoAhn",tags:["i18n","typescript","template literal type"]},prevItem:{title:"How to Avoid Re-rendering Caused by Callback Function Props",permalink:"/en/avoid-re-render-by-function-props"},nextItem:{title:"How to use OAS generator in Front-end environment?",permalink:"/en/how-to-use-oas-generator"}},u={authorsImageUrls:[void 0]},c=[{value:"Intro",id:"intro",level:2},{value:"About I18n",id:"about-i18n",level:3},{value:"How about I18n return type",id:"how-about-i18n-return-type",level:3},{value:"What is matter?",id:"what-is-matter",level:3},{value:"Goal",id:"goal",level:2},{value:"I18n Rule",id:"i18n-rule",level:3},{value:"Line Break",id:"line-break",level:4},{value:"Variable",id:"variable",level:4},{value:"Link",id:"link",level:4},{value:"I18n Return Type",id:"i18n-return-type",level:3},{value:"Recap of Goal",id:"recap-of-goal",level:3},{value:"Definition of Type",id:"definition-of-type",level:2},{value:"LineBreak",id:"linebreak",level:3},{value:"Template Literal Type",id:"template-literal-type",level:4},{value:"Define line break type",id:"define-line-break-type",level:4},{value:"Function type inference",id:"function-type-inference",level:4},{value:"To determine the type of entry to a variable",id:"to-determine-the-type-of-entry-to-a-variable",level:3},{value:"To check the number of variables",id:"to-check-the-number-of-variables",level:3},{value:"Recursive Conditional Types",id:"recursive-conditional-types",level:4},{value:"Inferring Within Conditional Types",id:"inferring-within-conditional-types",level:4},{value:"Rest Parameters",id:"rest-parameters",level:4},{value:"Result",id:"result",level:2},{value:"Recap",id:"recap",level:2},{value:"Appendix #1 Receive variables as objects instead of arrays",id:"appendix-1-receive-variables-as-objects-instead-of-arrays",level:2},{value:"Example",id:"example",level:3},{value:"To get keys for variables",id:"to-get-keys-for-variables",level:3},{value:"Set the type to allow the acquired keys to enter the parameters",id:"set-the-type-to-allow-the-acquired-keys-to-enter-the-parameters",level:3},{value:"If I18n text is not stringed, infer with ReactElement",id:"if-i18n-text-is-not-stringed-infer-with-reactelement",level:3}],d={toc:c},h="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(h,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"intro"},"Intro"),(0,i.kt)("p",null,"I am using typescript and ",(0,i.kt)("a",{parentName:"p",href:"https://www.i18next.com/"},"i18next")," for our project,\nI would like to summarize the experience of strongly applying the type check of the i18n JSON file."),(0,i.kt)("h3",{id:"about-i18n"},"About I18n"),(0,i.kt)("p",null,"First, the following is how i18n was being used."),(0,i.kt)("p",null,"i18n is used to display text in multiple languages on the same webpage, meaning to display it in a language with one key, multiple values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const i18nJSON = {\n  'simple-example': 'This is example text',\n  'values-example': 'I need to show {0} value',\n  'line-break-example': 'Hello. \\n I am FE developer'\n} as const\n")),(0,i.kt)("p",null,"First, there is an object in the form of Key-Value as above. The object may be a JSON or an object of a typescript."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import tFunction from 'utils';\n\ntFunction('simple-example') // This is example text\ntFunction('values-example', [15]) // I need to show 15 value\ntFunction('line-break-example') // Hello <br /> I am FE developer\n")),(0,i.kt)("p",null,"Second, ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," is used to insert the i18n key to obtain a string that fits the key.\nIn some cases, the string including the value that fits each text may be returned by inserting a variable such as ",(0,i.kt)("inlineCode",{parentName:"p"},"values-example"),"."),(0,i.kt)("p",null,"In the last ",(0,i.kt)("inlineCode",{parentName:"p"},"line-break-example"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," line break character is converted to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<br/>")," tag so that it can be line break on React."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This article uses a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," as a method for applying i18n.\nSince it mainly deals with content at the type level, not JS logic, it will not deal with what actually happens to internal logic.\nIt can be said that it plays the same role as a function such as ",(0,i.kt)("a",{parentName:"p",href:"https://www.i18next.com/overview/api#t"},"i18next.t"),".")),(0,i.kt)("h3",{id:"how-about-i18n-return-type"},"How about I18n return type"),(0,i.kt)("p",null,"Here, it may be seen what value the returned value in ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," is. Then, what is the type of each return value?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},"import tFunction from 'utils';\n\ntFunction('simple-example')\n// This is example text\n// string\ntFunction('values-example', [15])\n// I need to show 15 value\n// string\ntFunction('line-break-example')\n// Hello <br /> I am FE developer\n// ReactElement\n")),(0,i.kt)("p",null,"It may be considered that L3 and L6 are string types.\nHowever, in L9, ReactElement is returned because there is ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," in the i18n text."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"To support the line break by returning the string without returning to ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactElement"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"},"dangerouslySetInnerHTML")," shall be used."),(0,i.kt)("p",{parentName:"admonition"},"However, since there are many limitations, return to ReactElement instead of string.")),(0,i.kt)("p",null,"If the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"values-example")," contains JSX such as atag instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"15"),", the return type of ",(0,i.kt)("inlineCode",{parentName:"p"},"values-example")," is also different."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import tFunction from 'utils';\n\ntFunction('values-example', [15]) \n// I need to show 15 value\n// string\n\ntFunction('values-example', [<a href=\"/about\">more</a>]) \n// I need to show <a href=\"/about\">more</a> value\n// ReactElement\n")),(0,i.kt)("p",null,"Even if the ",(0,i.kt)("inlineCode",{parentName:"p"},"values-example")," I18n key is used as above, the type must vary depending on what value comes to values.\nThis is because ",(0,i.kt)("inlineCode",{parentName:"p"},"a tag")," must also be returned to a component that is a ReactElement, not a string, as in ",(0,i.kt)("inlineCode",{parentName:"p"},"<br/>"),"."),(0,i.kt)("h3",{id:"what-is-matter"},"What is matter?"),(0,i.kt)("p",null,"It was found that the i18n Text type varies as string and ReactElement depending on the case.\nSo what is the problem?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"tFunction")," is that it does not intelligently infer types as mentioned above.")),(0,i.kt)("p",null,"What is the problem if the type is not properly inferred here?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"<input \n  type='input' \n  placeholder={tFunction('line-break-example')} // type error  \n/>\n")),(0,i.kt)("p",null,"In many cases, typically when using HTML tags, attributes defined as strings may contain i18n values rather than strings.\nIn this case, ",(0,i.kt)("inlineCode",{parentName:"p"},"[object Object]")," is displayed in the placeholder instead of the xlt text."),(0,i.kt)("p",null,"Of course, it's obviously strange to have an a tag in the placeholder or a line change like \\n.\nHowever, there may be cases where the i18n key is incorrectly used, or there may be cases where the i18n text is incorrectly registered."),(0,i.kt)("p",null,"In other words, there are the above problems in that the type is not properly inferred when using typescript, and it can cause another problem."),(0,i.kt)("p",null,"In this article, we will talk about how to define the type by format of i18n text.\nThis article is basically related to typescript ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html"},"Template Literal Types"),", although i18n is an example."),(0,i.kt)("admonition",{title:"PRE-REQUIRED",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"General knowledge of ",(0,i.kt)("inlineCode",{parentName:"li"},"typescript 4.1+")),(0,i.kt)("li",{parentName:"ul"},"Interest in ",(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html"},"Template Literal Types")),(0,i.kt)("li",{parentName:"ul"},"The experience of ",(0,i.kt)("inlineCode",{parentName:"li"},"i18n system"),"(optional)"))),(0,i.kt)("h2",{id:"goal"},"Goal"),(0,i.kt)("p",null,'Rules must be established to respond to line breaks and variables while using i18n.\nLike rule that "put in ',(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),' when you want to line break on the string"\nor "If you want to insert a variable that depends on the case, use ',(0,i.kt)("inlineCode",{parentName:"p"},"{}"),"."),(0,i.kt)("p",null,"We will first explain the i18n rule we are using and then talk about how to decide the type for the rule."),(0,i.kt)("h3",{id:"i18n-rule"},"I18n Rule"),(0,i.kt)("h4",{id:"line-break"},"Line Break"),(0,i.kt)("p",null,"In i18n text, if you want to line break and display it, put ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," in the part of i18n text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// i18n text json\n{\n  "lineBreak": "Hello. \\n I am FE developer"\n}\n\n// displayed text\nHello\nI am FE developer\n')),(0,i.kt)("h4",{id:"variable"},"Variable"),(0,i.kt)("p",null,"In i18n text, if you want to include a variable in the JS code that is contextually different, rather than static text, Cover with ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),".\nBecause you can put multiple variables in one i18n text, Inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),", start from 0 and increase it by 1."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// i18n text json\n{\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import tFunction from 'utils';\n\ntFunction('oneValue', [tFunction('unit', [1000])])\n// This product is $1000.\n\ntFunction('twoValue', [tFunction('unit', [500]), 3])\n// This product is $500 and it will be delivered after 3 days\n")),(0,i.kt)("h4",{id:"link"},"Link"),(0,i.kt)("p",null,"If you want to include a link in the i18n text, you use the same way as the variable.\n",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," is wrapped and used, and the text to be shown on the link is made into a separate i18n text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// i18n text json\n{\n  "link": "click",\n  "linkText": "{0} to show more information"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import tFunction from 'utils';\n\ntFunction('linkText', [<a href=\"/more\">{tFunction('link')}</a>])\n// <a href=\"/more\">click</a> to show more information \n")),(0,i.kt)("h3",{id:"i18n-return-type"},"I18n Return Type"),(0,i.kt)("p",null,"Then, for the above cases, what type of ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," would be ideal to be returned to?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import tFunction from \'utils\';\n\nconst i18nJson = {\n  "lineBreak": "Hello. \\n I am FE developer",\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n  "link": "click",\n  "linkText": "{0} to show more information"\n} as const;\n\ntFunction(\'lineBreak\') \n// Hello <br /> I am FE developer\ntFunction(\'oneValue\', [tFunction(\'unit\', [1000])])\n// This product is $1000.\ntFunction(\'twoValue\', [tFunction(\'unit\', [500]), 3])\n// This product is $500 and it will be delivered after 3 days\ntFunction(\'linkText\', [<a href="/more">{tFunction(\'link\')}</a>])\n// <a href="/more">click</a> to show more information \n')),(0,i.kt)("p",null,"Since L12 contains ",(0,i.kt)("inlineCode",{parentName:"p"},"<br />"),", it should not be inferred as a normal string.\nTherefore, if there is a line change such as ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," in i18n text, the type should be inferred as ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactElement"),"."),(0,i.kt)("p",null,"L14 and L16 contain ",(0,i.kt)("inlineCode",{parentName:"p"},"values ({0} and {1})"),", but the additional value is also string or number. Therefore, it may be inferred as ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("p",null,"The last L18 is slightly different from the L14 and L16.\nThe a tag was included as values, and in order to display it, the type must be inferred as ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactElement"),"."),(0,i.kt)("h3",{id:"recap-of-goal"},"Recap of Goal"),(0,i.kt)("p",null,"Therefore, the goals are summarized as follows."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The return type of ",(0,i.kt)("inlineCode",{parentName:"li"},"tFunction")," should be inferred according to the i18n key."),(0,i.kt)("li",{parentName:"ul"},"The return type of ",(0,i.kt)("inlineCode",{parentName:"li"},"tFunction")," depends on the format of the i18n text that matches the i18n key.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If you have a ",(0,i.kt)("inlineCode",{parentName:"li"},"\\n")," line-breaking keyword in i18n text, infer it as ",(0,i.kt)("inlineCode",{parentName:"li"},"ReactElement"),"."),(0,i.kt)("li",{parentName:"ul"},"In i18n text, if the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"{}")," has a keyword, and values such as string and number are entered as variables, it is inferred as string."),(0,i.kt)("li",{parentName:"ul"},"In i18n text, if the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"{}")," has a keyword, and a value other than string and number is entered as a variable, it is inferred as ReactElement."))),(0,i.kt)("li",{parentName:"ul"},"In addition, it would be good to check the type in the second parameter of ",(0,i.kt)("inlineCode",{parentName:"li"},"tFunciton")," depending on whether the i18n text has the ",(0,i.kt)("inlineCode",{parentName:"li"},"{}")," variable keyword or how many.")),(0,i.kt)("h2",{id:"definition-of-type"},"Definition of Type"),(0,i.kt)("p",null,"Now, we are planning to fill in the return type of ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," according to the above conditions.\nLet's look at an example of the code below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React from \'react\';\n\nconst i18nJson = {\n  "simple": "Hello World",\n  "lineBreak": "Hello. \\n I am FE developer",\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n  "link": "click",\n  "linkText": "{0} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\ntype TFunction = (key: I18nKey, values?: any) => string\n\nconst tFunction: TFunction = (key: I18nKey, values: any) => i18nJson[key]; \n\nconst simple = tFunction(\'simple\'); // string\nconst lineBreak = tFunction(\'lineBreak\'); // string\nconst oneValue = tFunction(\'oneValue\', [tFunction(\'unit\', 500)]);\n// string\nconst twoValue = tFunction(\'twoValue\', [tFunction(\'unit\', [500]), 3]);\n// string\nconst linkText = tFunction(\'linkText\', [<a href="/about">{tFunction(\'link\')}</a>])\n// string\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4AoctCAOwGd5gBGADhoCk7a4BeOAb3Jw4AIjqgwAGyQiAXKIASSSZIhwA6tEkATEQBohoycBpIAQkRQBrOYuWqAdHAA6NOAEk4KPADEAonDaSABuyhBgSFD6hiK0SABqKJIArjLyIgAqABbAdHBgONrJGHC5AgAMAL4O0cIiyTTAMLYiACT8VbWiMADuEIkpaaLZZQUQRSVlHZVeNNql8D3AKnAARkiBysChRPMomDCRAkwz2igAnnRdIsY0Nuloxmg2BnW3VhlIAB7N6dNwMDUdCyEB6cBA0A2Jkw0BAKBgwFoInIMxQeWo9BgFHIMHOEQ8rA4XDcfFxEQgmFKhM4tAoZI27kJAGkkOdeHArKyKQS2DSaNj6XAMj4GhhESS4AAKTnneSMtgs856ODBJKpOgAfnkKBo5wAlLwAHxwBhQEwAc0oGIYAJFNDFtHkwtFCO4fGlrLlzNZytVgzo2t1Bp4xuYvOJAG0ZQBdUhwK20G3icDSdkwO0OmiS-DJqRIfB6uNURPwW7mSxWNMZ11Z-BliyoKwFijW+BxAapKsu8XZ9tq-PKiPp7u0bMNJr4ZUAVnK5T10cLxcxAL6HY2pOrPfwvX6-cncCHm9H+HHMH3EZn5QXyoAzAuWyW4O9Pj8u-aa9nn98z4OADwoOAsiITAeBEAB6FBVggZJmkNfhh3fLd3gLSpfwgw0F3IIA"},"playground")),(0,i.kt)("p",null,"All previous examples of i18n text used as examples are included in ",(0,i.kt)("inlineCode",{parentName:"p"},"i18nJson"),", which is inferred as ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nJson")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nKey"),".\nThis defines the ",(0,i.kt)("inlineCode",{parentName:"p"},"TFunction")," function type and uses it for ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction"),".\nCurrently, all are returning to the string type, but our goal is to infer this from a different type depending on the case.\nIn other words, although both L20-L27 are currently inferred as strings, at the end of this article,\nit aims to be divided into strings and ReactElement according to the format of text according to each key."),(0,i.kt)("h3",{id:"linebreak"},"LineBreak"),(0,i.kt)("p",null,"First, if ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," is included in i18n text, we will learn how to return to ReactElement instead of string.\nWe need to understand the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"},"Template Literal Type")," for this feature."),(0,i.kt)("h4",{id:"template-literal-type"},"Template Literal Type"),(0,i.kt)("p",null,"Typescript has a string type and a literal type. Furthermore, there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Template Literal Type")," that combines literal types to create another type.\nAs an example, it is as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},"let str1 = 'example' // string\nconst str2 = 'example' // 'example'\n\ntype StrPrefix = 'one' | 'two'\ntype StrPostfix = 'type' | 'sample'\n\ntype TemplateStr = `${StrPostfix}_${StrPostfix}`\n// 'one_type' | 'two_type' | 'one_sample' | 'two_sample'\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"str1")," of L1 is declared ",(0,i.kt)("inlineCode",{parentName:"p"},"let")," and is not inferred as a literal type,\nbut as a string type because the ",(0,i.kt)("inlineCode",{parentName:"p"},"str1")," variable can be reallocated to a different value.\nOn the other hand, ",(0,i.kt)("inlineCode",{parentName:"p"},"str2")," of L2 is declared as ",(0,i.kt)("inlineCode",{parentName:"p"},"const")," and is inferred as a literal type of ",(0,i.kt)("inlineCode",{parentName:"p"},"example"),"."),(0,i.kt)("p",null,"By combining ",(0,i.kt)("inlineCode",{parentName:"p"},"StrPrefix")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"StrPostfix")," declared in L4-L5, ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateStr")," is inferred as a Union type with four literal types in L7."),(0,i.kt)("p",null,"Using this principle, we will check the ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," text in i18n text and infer it as a separate type."),(0,i.kt)("h4",{id:"define-line-break-type"},"Define line break type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "simple": "Hello World",\n  "lineBreak": "Hello. \\n I am FE developer",\n} as const;\n\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\n// highlight-start\ntype LineBreakFormat = `${string}\\n${string}`;\n\ntype TFunction = <Key extends I18nKey,>(\n  key: Key,\n  values?: any,\n) => I18nJson[Key] extends LineBreakFormat ? ReactElement : string;\n// highlight-end\n\nconst tFunction: TFunction = (key: I18nKey, values: any) =>\n  i18nJson[key] as any;\n\nconst simple = tFunction(\'simple\'); // string\nconst lineBreak = tFunction(\'lineBreak\'); // ReactElement\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?ssl=8&ssc=1&pln=9&pc=1#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARENBhSagFzqAEkmLEIcAOrRiAEzWYV64sApIAQuxQBrPYeOmAdHAAOhRwAJJwKMwAYoRw1kgAbsYQYEhQdjy0KEJwAsIwvDwwAJ5p4ZIycqFKpWkQdHDiUrKCvHVIFVIA0kglinCefQ1dVW18HXAAMs5uHp7R0CAo8EoABgAkOCJQzgDm1CFbO-vUa0WTACrRAK4UGMDySgA8vf1IAB4wlNa5YZVvTAAPgAFEMSvpAXBEihiDckEIAPz6FAUEoASkUQNGrQoAG03gBdOCfb4UX7TWbuVALJYrOCI-DoGAkMiUeD6E4UPZFfIiOAwW73GCPCj6a53B5POBgvr6f49PrYGFwhEotGYhTY5pjfHg4k5SJorhwPh8+CacCkAaCyUiwQgliW7RIFjok0Aeg9cC5e34gn5Thc1K8NqFUoojqDcxpbs93uQzNZ5CoQA"},"playground")),(0,i.kt)("p",null,"If you look at L12, use the Template Literal String to make the ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBreakFormat")," type separately.\nIf you set ",(0,i.kt)("inlineCode",{parentName:"p"},"${string}\\n${string}"),", you have a string of ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," wrapped in the string\nIt is inferred as ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBreakFormat"),"."),(0,i.kt)("h4",{id:"function-type-inference"},"Function type inference"),(0,i.kt)("p",null,"We should infer the return type by looking at the literal type of the key entering run-time when calling ",(0,i.kt)("inlineCode",{parentName:"p"},"TFunction"),".\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nKey")," is used as it is in the type area, the return type cannot be changed according to the key input value."),(0,i.kt)("p",null,"Here, change it as follows using ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#inference"},"Function type conference"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Before\ntype TFunction = (key: I18nKey, values?: any) => string\n\n// After\ntype TFunction = <Key extends I18nKey,>(key: Key, values?: any) => string;\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Key")," is extracted as Generic in the above way and ",(0,i.kt)("inlineCode",{parentName:"p"},"TFunction")," is not explicitly declared, the literal type entering the key can be used."),(0,i.kt)("p",null,"Finally, determine whether the I18n text for the key is ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBreakFormat")," and branch ReactElement and string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// Before\ntype TFunction = <Key extends I18nKey,>(key: Key, values?: any) => string;\n\n// After\ntype TFunction = <Key extends I18nKey,>(key: Key, values?: any) =>\n// highlight-start\n  I18nJson[Key] extends LineBreakFormat ? ReactElement : string;\n// highlight-end\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"typescript"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," means inheritance when used in interface, but it can also be used as ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"},"Conditional Types"),".\nTherefore, if i18n Text, ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nJson[Key]")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBreakFormat"),", it returns to ReactElement, otherwise it returns to string type."),(0,i.kt)("p",null,"Here, the key of ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nJson[Key]")," is a literal type used for run-time."),(0,i.kt)("p",null,"Therefore, if ",(0,i.kt)("inlineCode",{parentName:"p"},"simple")," is introduced as a key, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello World")," literal type by inference as a type for ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nJson['simple']"),". ",(0,i.kt)("br",null),"\nIf ",(0,i.kt)("inlineCode",{parentName:"p"},"lineBreak")," is used as a key, the condition logic of ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBreakFormat")," is meaningful because the type comparison of ",(0,i.kt)("inlineCode",{parentName:"p"},"Hello. \\n I am FE developer")," is performed as a type of ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nJson['lineBreak']"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"I18nJson[Key]"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Key: simple -> ",(0,i.kt)("inlineCode",{parentName:"li"},"I18nJson['simple']")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"'Hello World'")),(0,i.kt)("li",{parentName:"ul"},"Key: lineBreak -> ",(0,i.kt)("inlineCode",{parentName:"li"},"I18nJson['lineBreak']")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"'Hello. \\n I am FE developer'"))))),(0,i.kt)("p",null,"Thanks to this, the return type proceeds differently in L17-L18 with the string and react element types, respectively."),(0,i.kt)("h3",{id:"to-determine-the-type-of-entry-to-a-variable"},"To determine the type of entry to a variable"),(0,i.kt)("p",null,"Next, if there is only a number and a string in the second parameter array of ",(0,i.kt)("inlineCode",{parentName:"p"},"TFunction"),",\nthe string is returned, and if other values such as ReactElement are included, the ReactElement is returned."),(0,i.kt)("p",null,"As an example, the code to view is as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},"import React from 'react';\n\nconst i18nJson = {\n  \"oneValue\": \"This product is {0}.\",\n  \"twoValue\": \"This product is {0} and it will be delivered after {1} days\",\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\ntype TFunction = (key: I18nKey, values?: any) => string\n\nconst tFunction: TFunction = (key: I18nKey, values: any) =>\n  i18nJson[key] as any;\n\nconst oneValue = tFunction('oneValue', [100]);\nconst twoValue = tFunction('twoValue', [100, '200']);\nconst twoValueWithReactElement = tFunction(\n  'twoValue',\n  [100, <a>Hello</a>],\n);\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4AoctCAOwGd5gBGADhoCk7a4BeOAb3Jw4AIlpIAaigA2AVyQiAXKIAqAC2B04YHABNZGOJoEAGAL4A6EQBohomAHcIUuQuUj1xnRH2Hj-czgUGl0jeAdgaWk4ACMkOF0kaWAANyQiUJRMGHSBJjMElABPOhtyApQtanoYCnIYIrB4gElWDi4aXjgGpohMIzbOWgoelraAaSQiroBrKb64VrYhmjrRuBUAMVkaDGBuPgAKOaLlJZpJous4FJl5OgB+ZWCigEpeAD44BihgGgBzSjVBjdba7GD7GjKLY7PYHODHKZnCZTa63Vx0Z40N6fAbLDoAbROAF1SHAgbQQeIXPIujAwXCaId8NS7kh8NcCUwTCZia8KMD4I5nGy6QyIbRmcKaezOdyTNcAEw8vkCylCpwygDqwBgamQ6BgAFFpEgQEgaPA+PTYRKmfhpWyOXAuTzrgAeFAfAASSWkEHdAHovaryEA"},"playground")),(0,i.kt)("p",null,"Only necessary parts of the existing playground code have been left.\nOur goal is to return L15 and L16 to string because the second parameters is an array consisting only of number and string,\nand return to ReactElement because L17 puts ",(0,i.kt)("inlineCode",{parentName:"p"},"a tag")," as a variable."),(0,i.kt)("p",null,"The solution is simple. All you have to do is determine whether the values are of type ",(0,i.kt)("inlineCode",{parentName:"p"},"(string | number)[]"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"type TFunction = <Params extends any[],>(key: I18nKey, values?: Params) =>\n  Params extends (string | number)[]\n  ? string : ReactElement\n")),(0,i.kt)("p",null,"In the above code, the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," is extracted as a Generic type to use\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#inference"},"type inference"),",\nand no Generic is used when calling ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction"),". Then we can use condition type as the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"Params"),"."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," is an array consisting of only number and string,\nit is automatically inferred as a type string, and if another value(ReactElement) is included, it is returned as a ReactElement.\nWhen checked on the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4AoctCAOwGd5gBGADhoCk7a4BeOAb3Jw4AIlpIAaigA2AVyQiAXKIAqAC2B04YHABNZGOJoEAGAL4A6EQBohomAHcIUuQuUj1xnRH2Hj-czgUGl0jeAdgaWk4ACMkOF0kaWAANyQiUJRMGHSBJjMElABPOhtyApQtanoYCnIYIrB4gElWDi4aXjgGpohMIzbOWgoelraAaSQiroBrKb64VrYhmjrRuBUAMVkaDGBuPgAeAAUUKBQQLSQADxyQrWCigG0AXWsAPgAKOaLlJZpJkVrHAUjJ5HQAPzKU7nS4ASl47zgMIuV1uSHucE+DCgwBoAHM4AAfOA0WQgOJQOGvOAQuA4vGE5TIdAwACi0iQIAxMEo1QY3W2uxg+xoyi2Oz2ByxPz+EymwNBrjoykeCJ4SOYyw6Tx+L1IcD5tAF4hc8i6MCFUpon3wprBSHwwKeTBMJhecIo-PgjmcDotVpFtFtvrNjudrpMwIATG6PV7jT6nGGAOrAGBqFkYDlcnkByVBm34UMOp1wF1u4GHFDvAASSWkEEOAHoa-HyEA"},"playground"),"\n, it is inferred as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const oneValue = tFunction('oneValue', [100]); // string\nconst twoValue = tFunction('twoValue', [100, 200]); // string\nconst twoValueWithReactElement = tFunction(\n  'twoValue',\n  [100, <a>Hello</a>],\n); // ReactElement\n")),(0,i.kt)("p",null,"Thus, if a value other than number and string is included in the variable, we found a method to infer as ReactElement."),(0,i.kt)("p",null,"However, if i18n including variables is used, there may be the following cases."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const i18nJson = {\n  "normal": "Hello World",\n  "oneValue": "This product is {0}.",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n} as const;\n\nconst oneValue = tFunction(\'oneValue\');\n// NEED type error!!\n// Variables should be used, but empty values are entered.\nconst twoValue = tFunction(\'twoValue\', [100]);\n// NEED type error!!\n// The two is time to be, but when it enters only one.\nconst normal = tFunction(\'normal\', [100]);\n// NEED type error!!\n// If there should be no variables, but they are being used.\n')),(0,i.kt)("p",null,"In other words, it is about the case where the number of variables is not correct or used when they should be used, or used when they should not be used.\nFor this, a more complex type declaration is needed, and let's continue with the next paragraph."),(0,i.kt)("h3",{id:"to-check-the-number-of-variables"},"To check the number of variables"),(0,i.kt)("p",null,"Now, we need to find how many strings are wrapped with ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),".\nAs we used in the line break before, We'll use the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"},"Template Literal Type"),"\nWe will use it, but that is not enough."),(0,i.kt)("h4",{id:"recursive-conditional-types"},(0,i.kt)("a",{parentName:"h4",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#recursive-conditional-types"},"Recursive Conditional Types")),(0,i.kt)("p",null,"We need to find string that wrapped ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," and check it again. The Recursive method is used for this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// This is not working!\ntype ValuesArray<I18nText extends string> =\n  I18nText extends `${string}{${string}}${string}`\n  ? [any, ...ValuesArray<I18nText>] : [];\n")),(0,i.kt)("p",null,"It is used in the same way as above. (Of course, the code above is incorrect.)"),(0,i.kt)("p",null,"I think it declares ",(0,i.kt)("inlineCode",{parentName:"p"},"Values Array")," and hands over i18n text to ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nText")," for type inference.\nThen, if there is a literal type of ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," in the I18nText, it is to create an array and perform ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray")," again."),(0,i.kt)("p",null,"Of course, this code will not work properly now. ",(0,i.kt)("br",null),"\nThis is because the input of Recursive, that is, I18nText, is being put back in full I18nText. ",(0,i.kt)("br",null),"\nWe need to extract the remaining right string from the string containing ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," and put it as input of the recursive."),(0,i.kt)("p",null,"To example this as an example,"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Hello {0} World {1} Thank {2} you")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"World {1} Thank {2} you")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Thank {2} you"))),(0,i.kt)("p",null,"If we use text 1 on ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray"),", result is inferred ",(0,i.kt)("inlineCode",{parentName:"p"},"[any, ...ValuesArray<?>]")," and rest string(2nd text) is entered on ",(0,i.kt)("inlineCode",{parentName:"p"},"?"),".\nNext ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray")," uses text 2 as input. it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[any, any, ...ValuesArray<?>]"),".\nAt last, ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray")," should use text 3 as input, and it should return ",(0,i.kt)("inlineCode",{parentName:"p"},"[any, any, any]"),"."),(0,i.kt)("p",null,"To above logic, we will use ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types"},"infer")),(0,i.kt)("h4",{id:"inferring-within-conditional-types"},(0,i.kt)("a",{parentName:"h4",href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types"},"Inferring Within Conditional Types")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Infer")," is used, the generic used in the conditional type can be taken and used as the return type.\nIn other words, it is as follows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"type ValuesFormat<Suffix extends string> =\n  `${string}{${string}}${Suffix}`;\ntype ValuesArray<I18nText extends string> =\n  I18nText extends ValuesFormat<infer Rest>\n  ? [any, ...ValuesArray<Rest>] : [];\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ValuesFormat")," is a type that includes generic ",(0,i.kt)("inlineCode",{parentName:"p"},"Suffix")," after ",(0,i.kt)("inlineCode",{parentName:"p"},"}"),",\nrather than a string containing simple ",(0,i.kt)("inlineCode",{parentName:"p"},"{}"),".\nIt is meaningless if used alone, but if used with ",(0,i.kt)("inlineCode",{parentName:"p"},"infer")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Values Array")," below, the meaning is different.\nAs in the previous example, ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray")," check if ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," exist and fill in the array.\nThen, ",(0,i.kt)("inlineCode",{parentName:"p"},"infer Rest")," is used, and ",(0,i.kt)("inlineCode",{parentName:"p"},"Rest")," means Suffix, the first generic of ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesFormat"),", and if we use Rest for the next recursive, what we want is completed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"type Example = 'Hello {0} World {1} Thank {2} you';\n\ntype ValuesFormat<Suffix extends string> =\n  `${string}{${string}}${Suffix}`;\ntype ValuesArray<I18nText extends string> =\n  I18nText extends ValuesFormat<infer Rest>\n  ? [any, ...ValuesArray<Rest>] : [];\n\ntype Result = ValuesArray<Example> // [any, any, any];\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAogHgQwLZgDbQLxQOQAkKqoD2UA3gAwC+UA6kQE6oAmZAjNQCoAWCAdgNZkATNRBEArtgDcAKBmhIUAGoJU4iAGcAYgyQJgAHgDK4gGamAlnCgQ4wCLyYaoG4PQu8A5gD4oWAAYAJKSu7l6UpMGhHp6UlMEm5laU-rIK0CpqmgCC9PQIIAYAkqwAHLwctsA2dg5OLm4xvlgl5ZV2NfaOzpnq2rr6Bh6mEPRQAEqawL4A-FAA2nwgADRQAHQbvTl5BQaTrt4AulAAXAuHsvLg0PviqNVYWxq5+YXwyGgQvgD03wtLqwBUCWFxkQA"},"playground")),(0,i.kt)("p",null,"Now, let's apply ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray")," to the first example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},"import React, { ReactElement } from 'react';\n\nconst i18nJson = {\n  \"normal\": \"Hello World\",\n  \"oneValue\": \"This product is {0}.\",\n  \"twoValue\": \"This product is {0} and it will be delivered after {1} days\",\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\ntype ValuesType = string | number | ReactElement;\ntype ValuesFormat<Suffix extends string> =\n  `${string}{${string} }${Suffix}`;\ntype ValuesArray<I18nText extends string> =\n  I18nText extends ValuesFormat<infer Rest>\n  ? [ValuesType, ...ValuesArray<Rest>] : [];\n\n// highlight-start\ntype TFunction = <\n  Key extends I18nKey,\n  Params extends ValuesArray<I18nJson[Key]>,\n>(key: Key, values?: Params) => string\n// highlight-end\n\nconst tFunction: TFunction = (key: I18nKey, values: any) => i18nJson[key] as any; \n\nconst oneValue = tFunction('oneValue'); // Error?\nconst twoValue = tFunction('twoValue', [100]); // Type Error!\n// highlight-start\n// Argument of type '[number]' is not assignable\n// to parameter of type '[ValuesType, ValuesType]'.\n// highlight-end\nconst normal = tFunction('normal', [100]); // Type Error!\n// highlight-start\n// Type 'number' is not assignable to type 'undefined'.\n// highlight-end\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARBWggUxNQC51ACSTFiEOAHVoxACZrMK9YKQA1HQFck+9QBUAFsBCcGCMNu4YcIG4AAzUAHT2jmowAO4QbsSe3mr+USEQYRFROLFwKBQ2kfApwKZwAEZIcDYmwABuSOyVKHQwnbhitDYoAJ5CibQoQQLCMLw8MCNgTQCSkjJyFIpwi8sQdJHrsoK8u6vrANJII9sA1tf7cGtSxxTzZ3AZnkI+S01KIigwAoAHM4AAfOAUdwgRpQCH4dAwEhkShzBZ-T4eJBCABiWhQMAAPABldx0OjAAAecCQVL6FSCgOBIIAfNsAAYAEhwzNB1BwPL5IOo1B5ZIp1OoHNOmK+OIAglAoKMic8KD46fAtZQbEyYEDQeylOrNfTafTdUF5XiCcTgXR+sgROyAPxwADaNt+y2wcX9NqVKpGROdMFZAF04AYPRH5hjlnAfLj3BQMMB5EoiVcbjrGU9LtdsAAFFAqkBBPN6rGZRXK1Xq14enMR1msgAU9xGBhz2Da2KEroMpfLQgAlIp2cK+DMRDsU2mYBmKAZk6n05m4J3rgZ1b24P3a0IDOURhOFOzxC9Nh6u1GpmUKCMuHAZ4I5855dsYAuNxR2ywn7YiwY4vgA9GBcCEMq0Cuvw77wKk6TYt+v5LoIAFIfKLDYB6YjRNEEagXAEFJpi0GMFAACEr6kUqIIwmicCPB8LAetCsKdBGLCREEmjwFMQjACCFAoPUpA7OYYBlig5B9PCLGYmx3p-NgKnLNxcTwbMUIEsQqHruh-4sJoUDaMQOGevhhHEaRPpNBR0BUTwdlKRxcI8VE-FlEIQkiWJEkwOYrGpi0lIUEgNgsHEQA"},"playground")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"TFunction")," of L19, ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray")," was applied to ",(0,i.kt)("inlineCode",{parentName:"p"},"Parmas"),".\nAs the generic of ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesArray"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"I18nJson[Key]")," is added to dynamically receive the key through type inference so that i18n text can enter the generic.\nIf so, Params will be inferred as a ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesType")," array with a fixed length, respectively."),(0,i.kt)("p",null,"Therefore, an error occurs in the type check of L28 and L31, and the cause of the error is that an appropriate array length is not matched.\nHowever, L26 does not generate an error because the variable is not included, which is caused by the keyword '?' attached to the values of TFunction."),(0,i.kt)("p",null,"Let's increase the level of perfection a little."),(0,i.kt)("h4",{id:"rest-parameters"},(0,i.kt)("a",{parentName:"h4",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments"},"Rest Parameters")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Rest Parameters")," is used to dynamically set the number of arguments in the function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},"// highlight-start\ntype TFunction = <\n  Key extends I18nKey,\n  Params extends ValuesArray<I18nJson[Key]>\n>(key: Key, values?: Params) => string\n// highlight-end\n\nconst oneValue = tFunction('oneValue'); // Error?\nconst twoValue = tFunction('twoValue', [100]); // Type Error!\n")),(0,i.kt)("p",null,"Therefore, in the above example, ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," used in ",(0,i.kt)("inlineCode",{parentName:"p"},"oneValue")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"...")," (Rest Parameters), which changes the number of values depending on the case, instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," indicating that it is not necessary."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},"// highlight-start\ntype TFunction = <\n  Key extends I18nKey,\n  Params extends ValuesArrayResult<I18nJson[Key]>\n>(\n  key: Key,\n  ...values: Params extends [] ? [undefined?] : [Params]\n) => string\n// highlight-end\n\nconst tFunction: TFunction = (key: I18nKey, ...values: any) => i18nJson[key] as any;\n\nconst oneValue = tFunction('oneValue'); // Type Error!\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARBWggUxNQC51ACSTFiEOAHVoxACZrMK9YKQA1HQFck+9QBUAFsBCcGCMNu4YcIG4AAzUAHT2jmowAO4QbsSe3mr+USEQYRFROLFwKBQ2kfApwKZwAEZIcDYmwABuSOyVKHQwnbhitDYoAJ5CibQoQQLCMLw8MCNgTQCSkjJyFIpwi8sQdJHrsoK8u6vrANJII9sA1tf7cGtSxxTzZ3AZnkI+S01KIigwAoAHM4AAfOAUdwgRpQCH4dAwEhkShzBZ-T4eJBCABiWhQMAAPABldx0OjAAAecCQVL6FSCgOBIIAfNsAAYAEhwzNB1BwPL5IOo1B5ZIp1OoHNOmK+OIAglAoKMic8KD46fAtZQbEyYEDQeylOrNfTafTdUF5XiCcTgXR+sgROyAPxwADaNt+y2wcX9NqVKpGROdMFZAF04AYPRHZcssZlFcrRs73MRiaatRaGXq4MLjYnvkHVVn6eydYzPVH3e4KkhKRQkJUDIGUyGy+G+B8fLi6xhgPIlESrjdK3n1aPsAAFFAqkBBcfW7FCEsjNMZtVHTYe0cR1msgAU9xGBincH9cTaK4Ms-ni8tVdjcHdHrrLUbzddUZjd5QC4jABKRR2WFPgZhEHY+woAdBAMXt+xgQctiUY9rgMSdrj9f1ryTIQDHKEZgIUdlxBeHcTyjKYygoEYuDgcDBEg5x5W2GBoNgihDxYFjsRYQD6IAekEuBCGVaBXX4Jj4FSdJsTYjikMEbjZPlFhsA9MRomibAtJ0uA9KAoSRJ9JoxMYKAAEIGOEuAlRBGE0TgR4PhYD1oVhToIxYSIgk0eApiEYAQQoFB6lIHZzDAOd-yQPp4RczE3O9P5sBS5ZvLiKTZihAliAUxDkO4zQoG0Yh+OMuBTNE8SrJ4WzqpYDy4R8qJ-LKIQgpCsKIpgcxXPfBtgWbFg4iAA"},"playground")),(0,i.kt)("p",null,"Change ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"...values")," in L1 and type ",(0,i.kt)("inlineCode",{parentName:"p"},"[undefined?]")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," is an empty array, and ",(0,i.kt)("inlineCode",{parentName:"p"},"[Params]")," if it is not an empty array.\nIf so, if values are not required, it is set to optional, and if values are required, it is a method of receiving arrays of the length of the number."),(0,i.kt)("p",null,"Here, the ? in the item of the Array is about the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#optional-elements-in-tuple-types"},"Optional elements"),",\nwhich is a grammar in which each element can be set to optional."),(0,i.kt)("h2",{id:"result"},"Result"),(0,i.kt)("p",null,"We have implemented the following type definitions in previous articles."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Define the Return Type differently depending on the presence or absence of the line break keyword."),(0,i.kt)("li",{parentName:"ul"},"Define the return type differently according to the type of runtime value entering the i18n variable parameter."),(0,i.kt)("li",{parentName:"ul"},"Define the number of i18n variables entering ",(0,i.kt)("inlineCode",{parentName:"li"},"TFunction")," according to the number of i18n variable keywords.")),(0,i.kt)("p",null,"When the above three definitions are combined, we can check the first ",(0,i.kt)("a",{parentName:"p",href:"#i18n-rule"},"i18n Rule")," at the type level."),(0,i.kt)(r.Z,{defaultValue:"lineBreak",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"draft",label:"Draft",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React from \'react\';\n\nconst i18nJson = {\n  "simple": "Hello World",\n  "lineBreak": "Hello. \\n I am FE developer",\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n  "link": "click",\n  "linkText": "{0} to show more information",\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\ntype TFunction = (key: I18nKey, values?: any) => string\n\nconst tFunction: TFunction = (key: I18nKey, values: any) => i18nJson[key];\n\nconst simple = tFunction(\'simple\'); // string\nconst lineBreak = tFunction(\'lineBreak\'); // string\nconst oneValue = tFunction(\'oneValue\', [tFunction(\'unit\', 500)]); // string\nconst twoValue = tFunction(\'twoValue\', [tFunction(\'unit\', [500]), 3]); // string\nconst linkText = tFunction(\'linkText\', [<a href="/about">{tFunction(\'link\')}</a>]) // string\n')),(0,i.kt)("a",{href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4AoctCAOwGd5gBGADhoCk7a4BeOAb3Jw4AIjqgwAGyQiAXKIASSSZIhwA6tEkATEQBohoycBpIAQkRQBrOYuWqAdHAA6NOAEk4KPADEAonDaSABuyhBgSFD6hiK0SABqKJIArjLyIgAqABbAdHBgONrJGHC5AgAMAL4O0cIiyTTAMLYiACT8VbWiMADuEIkpaaLZZQUQRSVlHZVeNNql8D3AKnAARkiBysChRPMomDCRAkwz2igAnnRdIsY0Nuloxmg2BnW3VhlIAB7N6dNwMDUdCyEB6cBA0A2Jkw0BAKBgwFoInIMxQeWo9BgFHIMHOEQ8rA4XDcfFxEQgmFKhM4tAoZI27kJAGkkOdeHArKyKQS2DSaNj6XAMj4GhhESS4AAKTnneSMtgs856ODBJKpOgAfnkKBo5wAlLwAHxwBhQEwAc0oGIYAJFNDFtHkwtFCO4fGlrLlzNZytVgzo2t1Bp4xuYvOJAG0ZQBdUhwK20G3icDSdkwO0OmiS-DJqRIfB6uMAeiLJpgZpolut8Fu5ksVjTGddWfwtYsqCsBeLpdNFqoifgcQGqUbLvF2aHavzyoj6bHtGzDSa+GVAFZyuU9dHC3AS2WK1WBwC+sONqSm+P8L1+lOV3BZxeF-glzA7xH1+Vt8qAMzb7v7vtqzgd5Ph+Ud7WbbMQO+V8ZwAHhQOAsiITAeBEIsUFWCBkmaQ1+DnCDL3eAtKjgjDDW3Xce3LC0gA"},"Playground")),(0,i.kt)(o.Z,{value:"lineBreak",label:"Line Break",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "simple": "Hello World",\n  "lineBreak": "Hello. \\n I am FE developer",\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n  "link": "click",\n  "linkText": "{0} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\n// highlight-start\ntype LineBreakFormat = `${string}\\n${string}`;\n\ntype TFunction = <Key extends I18nKey,>(\n  key: Key,\n  values?: any,\n) => I18nJson[Key] extends LineBreakFormat\n  ? ReactElement : string;\n// highlight-end\n\n// highlight-start\nconst tFunction: TFunction = (key: I18nKey, values: any) => i18nJson[key] as any;\n// highlight-end\n\nconst simple = tFunction(\'simple\'); // string\n// highlight-start\nconst lineBreak = tFunction(\'lineBreak\'); // ReactElement\n// highlight-end\nconst oneValue = tFunction(\'oneValue\', [tFunction(\'unit\', 500)]); // string\nconst twoValue = tFunction(\'twoValue\', [tFunction(\'unit\', [500]), 3]); // string\nconst linkText = tFunction(\'linkText\', [<a href="/about">{tFunction(\'link\')}</a>]) // string\n')),(0,i.kt)("a",{href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARENBhSagFzqAEkmLEIcAOrRiAEzWYV64sApIAQuxQBrPYeOmAdHAAOhRwAJJwKMwAYoRw1kgAbsYQYEhQdg5qgkgAaijEAK5IPmoAKgAWwEJwYIzWhRhw1bgADNT+mapqhRTAMKUAJDjtXeowAO4Q+UUl+uVVNXUQDU0tI7QoFNbN8BPAJnAARkjxxsDJ7DsodDDpuGK01igAnkJjak4U3vNoTmjeezdL6eMpIAAeA3mGzgMDMQgqEAmcBA0FOzjo0BAKBgwEEah4mxqAmEMF4PBgLzS4UkMjkoSUlLSEDozVpskEvCZpzCtIA0kgXoo4J5BSyaVIORRydy4AAZZxuDyeaJYnHCgAGwxEUGcAHNqCFtTBdRQDRqZVTTmVor0MHiGXAADwCoUQu7bGq8qSuzAAPgAFKKXvpfXBEgVikIAPz6LYvACUij9ErpggA2q6ALpwd2Uaw1BUudyoFVq+DR-DoGAkMiUeD6HX6vgkkSw20Ue2CfQ2u24+RKIOC-TeihhiOzIRxiiJ5NsyX09PBnMoGrxrhwFuCNuacCkYUwDtdigBli77RIFgJjcAehvcCbZv42-gXyVpYPR-7J5Yb5LXivW972Qata3IKhn1JOAchmYpPz7B1TxgyNL2wdNDwQwRT16foWGwABWVpWgTLNrzgO8HxNZtW3gSZphQ+DO2-U86Ng1C4HQr9EJYHDODQwjWlI7AAGZSKAyjTT1SC2xBMFIUY49T1k908I4p0UDgCp2DoBQ1BvFAjggQoBj9HAMKY7iQSvagnX0v1SPI+9Hz1IA"},"Playground")),(0,i.kt)(o.Z,{value:"valueTypeCheck",label:"+ Values Type Check",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "simple": "Hello World",\n  "lineBreak": "Hello. \\n I am FE developer",\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n  "link": "click",\n  "linkText": "{0} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\ntype LineBreakFormat = `${string}\\n${string}`;\n\n// highlight-start\ntype TFunction = <Key extends I18nKey, Params extends any[]>(\n// highlight-end\n  key: Key,\n  values?: Params,\n) => I18nJson[Key] extends LineBreakFormat\n  ? ReactElement\n  // highlight-start\n  : Params extends (string | number)[]\n  ? string\n  : ReactElement;\n  // highlight-end\n\nconst tFunction: TFunction = (key: I18nKey, values: any) => i18nJson[key] as any;\n\nconst simple = tFunction(\'simple\'); // string\nconst lineBreak = tFunction(\'lineBreak\'); // ReactElement\nconst oneValue = tFunction(\'oneValue\', [tFunction(\'unit\', [500])]); // string\nconst twoValue = tFunction(\'twoValue\', [tFunction(\'unit\', [500]), 3]); // string\n// highlight-start\nconst linkText = tFunction(\n  \'linkText\',\n  [<a href="/about">{tFunction(\'link\')}</a>],\n) // ReactElement\n// highlight-end\n')),(0,i.kt)("a",{href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARENBhSagFzqAEkmLEIcAOrRiAEzWYV64sApIAQuxQBrPYeOmAdHAAOhRwAJJwKMwAYoRw1kgAbsYQYEhQdg5qgkgAaijEAK5IPmoAKgAWwEJwYIzWhRhw1bgADNT+mapqhRTAMKUAJDjtXeowAO4Q+UUl+uVVNXUQDU0tI7QoFNbN8BPAJnAARkjxxsDJ7DsodDDpuGK01igAnkJjak4U3vNoTmjeezdL6eMpIAAeA3mGzgMDMQgqEAmcBA0FOzjo0BAKBgwEEah4mxqAmEMF4PBgLzS4UkMjkoSUlLSEDozVpskEvCZpzCtIA0kgXoo4J5BSyaVIORRydy4AAZZxuDyeaJYnHCgAGwxEUGcAHNqCFtTBdRQDRqZVTTmVor0MHiGXAADwCoUQu7bGq8qSu7AABRQUCiNXdlGsNS2LwA2gBdAB8AAoHKKXvpfQ5EgVikIAPz6ANBkBCewASkUcYldMEUddMbgoc98sV7lQKrVMAcOfw6BgJDIlA7qnzgeD9chYZqCZ1+rgAB84BRCiATlAS7HO3Bp2aHPpkD2++QqOSSSJYbaKPbBPobXbcfIlAmU-pvRRfXBM7MhPpI2WFBXxJK9JRimdYoBGFAvFwcB8Ce8CaOApDCjA56XhQCYsPB2hICwJZQQA9Hhm4mvq-CCKeXxKq2SEoXeaEsBRLZeDh+GEXuRCkIeHawXAOQzMU1G3g66G8Vm2HYFGyGCYI6G9P0LDiQArK0rQxiWqksURpp6qRpKwlMfGnIyNFCSwkzTKJ8lwBJxnSSwsmcIpymqdgADM6lwARmkkdxIJgpCAkXrR6G+e6llRk6KBwBU7B0Aoah4SgRwQIUAxxjgkmBSZII4dQToJXGqkeaxHAHgOQA"},"Playground")),(0,i.kt)(o.Z,{value:"valueNumberCheck",label:"+ Value Number Check",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "simple": "Hello World",\n  "lineBreak": "Hello. \\n I am FE developer",\n  "oneValue": "This product is {0}.",\n  "unit": "${0}",\n  "twoValue": "This product is {0} and it will be delivered after {1} days",\n  "link": "click",\n  "linkText": "{0} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\n\ntype LineBreakFormat = `${string}\\n${string}`;\n\n// highlight-start\ntype ValuesType = string | number | ReactElement;\ntype ValuesFormat<Suffix extends string,> = `${string}{${string}}${Suffix}`;\ntype ValuesArray<I18nText extends string,> = I18nText extends ValuesFormat<infer Rest,> ? [ValuesType, ...ValuesArray<Rest,>] : [];\n// highlight-end\n\n// highlight-start\ntype TFunction = <\n  Key extends I18nKey,\n  Params extends ValuesArray<I18nJson[Key]>,\n>(\n// highlight-end\n  key: Key,\n// highlight-start\n  ...values: Params extends [] ? [undefined?] : [Params]\n// highlight-end\n) => I18nJson[Key] extends LineBreakFormat\n  ? ReactElement\n  : Params extends (string | number)[]\n  ? string\n  : ReactElement;\n\n// highlight-start\nconst tFunction: TFunction = (key, ...values) => i18nJson[key] as any;\n// highlight-end\n\nconst simple = tFunction(\'simple\'); // string\nconst lineBreak = tFunction(\'lineBreak\'); // ReactElement\nconst oneValue = tFunction(\'oneValue\', [tFunction(\'unit\', [500])]); // string\nconst twoValue = tFunction(\'twoValue\', [tFunction(\'unit\', [500]), 3]); // string\nconst linkText = tFunction(\'linkText\', [<a href="/about">{tFunction(\'link\')}</a>]) // ReactElement\n')),(0,i.kt)("a",{href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARENBhSagFzqAEkmLEIcAOrRiAEzWYV64sApIAQuxQBrPYeOmAdHAAOhRwAJJwKMwAYoRw1kgAbsYQYEhQdg5qgkgAaijEAK5IPmoAKgAWwEJwYIzWhRhw1bgADNT+mapqhRTAMKUAJDjtXeowAO4Q+UUl+uVVNXUQDU0tI7QoFNbN8BPAJnAARkjxxsDJ7DsodDDpuGK01igAnkJjak4U3vNoTmjeezdL6eMpIAAeA3mGzgMDMQgqEAmcBA0FOzjo0BAKBgwEEah4mxqAmEMF4PBgLzS4UkMjkoSUlLSEDozVpskEvCZpzCtIA0kgXoo4J5BSyaVIORRydy4AAZZxuDyeaJYnHCgAGwxEUGcAHNqCFtTBdRQDRqZVTTjNikIylbhTr9XAAD5wCiFEAnKCu-DoGAkMiUMkUh02pBCVVQbEwAA8AGVCnQ6MBwXAIXdtjUnWaAHya42mg04Qv66jUYaJ5Op6gW0PU8NCACCUCgr1jvKkYMh6chlGs2ZN+vzSk7FG78Az-ZqjajMdjGPuyBE+YA-HAANqN+1pbD+feNlttl6x5cwXMAXTg+g3F8t1LK0V6GDxDLgsYFQqnWYlFE-2AABRQNsQBqb8BzgQ9W3bMcpQ3T8L1zXMAAoHFFF59H-Bx938RICltfQgJAsC+x-W84HXDdegSFMXGsVcrxvIioiEC8eAASkUfNYPpeDBSvcCagVFx3FQFU1RgBx12Qf1A3IKgHEI4CWN7TMIOQnM9V9D0vXSdjbykuBNMUv0iFIeSQ34QQRFhJ8KBfQR9EfZ9cXkJRkPQvd9zw2YhE4hR83ESVePQq8UBqLYXi4OA+BJGzNHAUhhRgOyHIoZCWAS7QkBYdjooAenyoyhzNKzSTgL4lTE5LUtc9KWEq0SvFygqipksygwUuL4BycMapc18Mt6-CcuwDcUoGwQMt6foWDGgBWVpWgvdiVta4qizKmzJmmEb+vsuqMp28M5s3CaDsGlgZs4BalpW7AAGY1rgQqNv1Lb4BBCd9rSjKvozU6N1jFA4Aqdg6AUNR8pQI4IEKAZcxwc7foa5xPFy6hY2hy9ONe9qA3M4MgA"},"Playground"))),(0,i.kt)("p",null,"Let's look at the completed code above. Draft is a translation of ",(0,i.kt)("a",{parentName:"p",href:"#definition-of-type"},"the code")," that was originally imported as an example.\nHere, all ",(0,i.kt)("inlineCode",{parentName:"p"},"TFunctions")," are returned to the string type."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Line Break"))),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"Line Break")," version, the type of ",(0,i.kt)("inlineCode",{parentName:"p"},"lineBreak")," is inferred as ReactElement by adding a comparative sentence of ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBreakFormat"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Values Type Check"))),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"Values Type Check"),", we deduced ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," and compared the ",(0,i.kt)("inlineCode",{parentName:"p"},"string | number")," array, adding code so that ",(0,i.kt)("inlineCode",{parentName:"p"},"linkText")," is inferred as a ReactElement."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("inlineCode",{parentName:"p"},"Value Number Check"))),(0,i.kt)("p",null,"In the last ",(0,i.kt)("inlineCode",{parentName:"p"},"Value Number Check"),", we did not change the return type by specifying the type for ",(0,i.kt)("inlineCode",{parentName:"p"},"Params")," and applying ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," as the Rest Parameter\nThe type was strongly applied by checking the number of values entering the second factor of ",(0,i.kt)("inlineCode",{parentName:"p"},"tFunction")," at the type check stage."),(0,i.kt)("h2",{id:"recap"},"Recap"),(0,i.kt)("p",null,"We have thus defined the type so that we can proceed in the type check step,\nincluding whether there are line changes and variables in i18n Text, and the runtime type of the variable and the number of variables.\nIn this process, we utilized the following functions of Typecript."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"},"Template Literal Type")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#inference"},"Function Type inference")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"},"Conditional Types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#recursive-conditional-types"},"Recursive Conditional Types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types"},"Inferring Within Conditional Types")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments"},"Rest Parameters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#optional-elements-in-tuple-types"},"Optional elements in tuple types"))),(0,i.kt)("p",null,"A considerable number of features were used.\nIf you hadn't defined complex types, there would have been features that you didn't know,\nand there would have been features that you didn't understand conceptually but didn've actually used."),(0,i.kt)("p",null,"We used i18n Text to define and use complex but useful types to check errors at TypeCheck instead of checking errors at Runtime,\nand also checked the typescript knowledge required to implement each requirement."),(0,i.kt)("p",null,"Readers of this article may implement a similar type of service that applies the i18n they are developing,\nor they may use the above typescript concepts to improve the type."),(0,i.kt)("p",null,"What I felt while applying the type system to i18n is that the scope of use of typescript is wider than I thought,\nand it is very useful and safe to build a system so that it can be checked at Type-check rather than at runtime."),(0,i.kt)("p",null,"I hope you have gained fresh stimulation or useful knowledge while reading this article, and I leave an appendix on how it can be if an object enters the value position rather than an arrangement."),(0,i.kt)("h2",{id:"appendix-1-receive-variables-as-objects-instead-of-arrays"},"Appendix #1 Receive variables as objects instead of arrays"),(0,i.kt)("p",null,"We used Array format when we put variables in i18n text.\nHowever, even if you look at the example ",(0,i.kt)("a",{parentName:"p",href:"https://www.i18next.com/translation-function/interpolation#basic"},"i18next interpolation"),",\nthere are many cases where objects are used in the form of variables.\nTherefore, type definitions for tFunctions that inject objects other than arrays are summarized as appendices."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "oneValue": "This product is {value1}.",\n  "twoValue": "This product is {value1} and it will be delivered after {value2} days",\n  "link": "click",\n  "linkText": "{link} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\ntype LineBreakFormat = `${string}\\n${string}`;\n\ntype TFunction = <Key extends I18nKey,>(\n  key: Key,\n  values?: any,\n) => I18nJson[Key] extends LineBreakFormat\n  ? ReactElement : string;\n\nconst tFunction: TFunction = (key: I18nKey, values: any) => i18nJson[key] as any;\n\nconst oneValue = tFunction(\n  \'oneValue\',\n  {\n    value1: \'$500\'\n  },\n); // string\nconst twoValue = tFunction(\n  \'twoValue\',\n  {\n    value1: \'$500\',\n    value2: 3,\n  },\n); // string\nconst linkText = tFunction(\n  \'linkText\',\n  {\n    link: <a href="/about">{tFunction(\'link\')}</a>,\n  },\n) // string\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARIKQA1FMQCuSNQC51AFQAWwIXDCMAJnoxwruAG66DY6gDo1mFeowAO4QOvqGJmoWLrYQDk4uOO7hXnAoFHbO8EHAxMRwAEZIcHZIxMCuSOyZKHQwVW4eSABMtHYoAJ5CfgFq5RQA1sbqaOVoQ-6qfcCDpkgAHjDDajj9A7QwEHBC5hBBcCDQxTN00CAoMMCCajy0KNYCwjC8PDAdYMUAkpIychSKcDeHwgdGcP1kgl4QK+PwA0kgOgCBgiQXBvlIIRQoe9igAZGZIABC7BQAwAYmcLgCAAYAEhwIigMwA5tQADoUemMlnUanYj5wUxkvQUDBXf5KAA88MRC3qGWs6IoMswAD4ABQBZEdEwqgLJAxCAD8JnSHX8AEpFKq0eC-gBtGUAXTgcsodms+IoRJJ5Mp8CN+HQMBIZEo8BM3IozJejxEgOFosughMQpFYvkSnV2pMSpVcANSCEpooHStCht4gxDu1LvuaVLscE8c0YQMAJgiYzFHVLFbTRY2DwhbEJhYtIArAAGKcsODUC1cOAAemX2xgTOj-Gb8GCoSaHa7yZ7LD3baQg9wBaao9Yk5nl8LzRMAGZ54uV2uo8zt084Gs5kWQ902PXsALlS88DWExJRQOBzHYOgFDUZcUAKCA9CWVUcE7EDxTAmYBhYC1qElVCbQXT9103ZkgA"},"playground")),(0,i.kt)("p",null,"We will use the example above, and the form of putting as a variable has changed from an array to an object type.\nSo we're talking about the form of the object that goes into the variable."),(0,i.kt)("h3",{id:"to-get-keys-for-variables"},"To get keys for variables"),(0,i.kt)("p",null,"The keys in the ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," format of the text are acquired using ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#recursive-conditional-types"},"Recursive")," and ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types"},"infer"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"type ValueFormat<\n  Key extends string = string,\n  Suffix extends string = string,\n> = `${string}{${Key}}${Suffix}`\n\ntype ValuesKeyArray<I18nText extends string> =\n  I18nText extends ValueFormat<infer Key, infer Suffix>\n  ? [Key, ...ValuesKeyArray<Suffix>] : [];\n\ntype ValuesKeyUnion<I18nText extends string> =\n  ValuesKeyArray<I18nText>[number];\n\ntype result = ValuesKeyArray<'This product is {value1} and it will be delivered after {value2} days'>\n// result: 'value1' | 'value2'\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAaghgGwK4QGIHsBOBbOwA8A0hCFBAB7AQB2AJgM5T3CYCW1A5lALxMvscANFADKSAGbjW5MpRoM+bTj0UCAfCoAGAEgDezJRwC+uvcRBGjesZOlHNAKFCRYiFPXMBBTJjgh8AJIAjAAc1AAqFMCyVHSMBuoqwWGRlDHyjPDIaFi4BOziEJhQ5sIFRaISUuQaAPxQANqlUAB0bVnuXj5++DbVagC6UABcjQMA3E7g0B0QHiQAqtSs6NSBoRFR6XGqnBq8s-Mg3r7+yZuUag3USNgARkUTDlMumHNICNEHbnNdp-gAcnCAAtWIwwJh0LQkABjaJgqC6ABuPyCRigcDoUFY0QA7qwEAgoA8oLQIAhWEiihBaBjxFRisifgAmdG0Pz0AFqBxAA"},"playground")),(0,i.kt)("p",null,"Again, We separate key and suffix to infer using ",(0,i.kt)("inlineCode",{parentName:"p"},"ValueFormat")," and value of ",(0,i.kt)("inlineCode",{parentName:"p"},"{}")," is separated on ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesKeyArray"),".\nThen, we make it union using ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesKeyUnion"),".\nThis completes the extraction of keys that should enter the variable."),(0,i.kt)("h3",{id:"set-the-type-to-allow-the-acquired-keys-to-enter-the-parameters"},"Set the type to allow the acquired keys to enter the parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "oneValue": "This product is {value1}.",\n  "twoValue": "This product is {value1} and it will be delivered after {value2} days",\n  "link": "click",\n  "linkText": "{link} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\ntype LineBreakFormat = `${string}\\n${string}`;\ntype ValuesType = string | number | ReactElement;\n\ntype ValueFormat<\n  Key extends string = string,\n  Suffix extends string = string,\n> = `${string}{${Key}}${Suffix}`\n\ntype ValuesKeyArray<I18nText extends string> =\n  I18nText extends ValueFormat<infer Key, infer Suffix>\n  ? [Key, ...ValuesKeyArray<Suffix>] : [];\n\ntype ValuesKeyUnion<I18nText extends string> =\n  ValuesKeyArray<I18nText>[number];\n\ntype TFunction = <\n  Key extends I18nKey,\n  Params extends I18nJson[Key] extends ValueFormat\n  // highlight-start\n    ? [Record<ValuesKeyUnion<I18nJson[Key]>, ValuesType>]\n  // highlight-end\n    : [undefined?]\n>(\n  key: Key,\n  ...values: Params\n) => I18nJson[Key] extends LineBreakFormat\n  ? ReactElement : string;\n\nconst tFunction: TFunction = (key: I18nKey, ...values: any) => i18nJson[key] as any;\n\nconst oneValue = tFunction(\n  \'oneValue\',\n  {\n    value1: \'$500\'\n  },\n); // string\nconst twoValue = tFunction(\n  \'twoValue\',\n  {\n    value1: \'$500\',\n    value2: 3,\n  },\n); // string\nconst linkText = tFunction(\n  \'linkText\',\n  {\n    link: <a href="/about">{tFunction(\'link\')}</a>,\n  },\n) // string\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARIKQA1FMQCuSNQC51AFQAWwIXDCMAJnoxwruAG66DY6gDo1mFeowAO4QOvqGJmoWLrYQDk4uOO7hXnAoFHbO8EHAxMRwAEZIcHZIxMCuSOyZKHQwVW4eSABMtHYoAJ5CfgFq5RQA1sbqaOVoQ-6qfcCDpkgAHjDDajj9A7QwEHBC5hBBcCDQxTN00CAoMMCCajy0KNYCwjC8PDAdYMUAkpIychSKcDeHwgdGcP1kgl4QK+PwA0kgOgCBgiQXBvlIIRQoe9igAZGZIABC7BQAwAYmcLgCAAYAEhwIigMwA5tQADoUemMlnUanYj5wMIGISmHEA7kUZlwAA+cAoehARSgMvw6BgJDIlGefGhgqaFKg5xgAB54YiFvUMtYJVKlDbsABlPR0OjAeZwC2UOzWmBMyXi30sgB8NK5gcl1Bw9LN1Go9KdLrdvNeYqFSCEZoAglAoJ1jeiKHNFh7Fl6fX7mSGlAWi-BPVa9eEDUbjScGmbsG3lQnXfMQwB+OAAbQ7cG847TGYR2dzHWNPbdQYAunATEOl-zipOzQBVChXCj5n61kuW73bcOVgHb6c5vM1i1BofyxVVDc6sWmMl6CgYA8A40AjNU8yzROEEUmOAAAUUFzEBrHrc8C0xEcERXRDrDTZsLgCVRByHZABCgOxjRvDo9wPI8MT+VCOiXINsEnUUPmXXDV2HH9SldCgkDsfslx4IMAAoAmRDoTA7AJx28ZJhRMGC4KEHgAEpFBDZCaLNdDSwbfEeOJVByUpeBB2QNUNXIKh2JtF5HhEQFv1-S5BBML8fz-eQlCEsSTALUdpNk9MTHSDpVIUENxGowQhzEld7jSCgOlswR7M0NMARgRyPIoISWDSpoWGwPBArEEwWFpABWAAGKqWDgahlK4OAAHpmovCt+BS+BglCJoMqy5ycpYHq00K3A4BKsrKpqsbAuaEwAGZ6salq2ptTqnjgNYTyUTL3MG3LtotMa8DWExjRQOBzHYOgFBYZqUAKCA9E4IMcD2pyD0OmYBhYZTqGNB6QwaprWvalkgA"},"playground")),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"ValuesKeyUnion")," mentioned above, set the values type so that only objects for the key of the variable can be inserted\nusing ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#rest-parameters-and-arguments"},"Rest Parameters")," as shown in L22.\nIf so, in the L31-L33 example, an error will occur if a variable is not entered or if it is entered incorrectly."),(0,i.kt)("h3",{id:"if-i18n-text-is-not-stringed-infer-with-reactelement"},"If I18n text is not stringed, infer with ReactElement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"showLineNumbers",showLineNumbers:!0},'import React, { ReactElement } from \'react\';\n\nconst i18nJson = {\n  "oneValue": "This product is {value1}.",\n  "twoValue": "This product is {value1} and it will be delivered after {value2} days",\n  "link": "click",\n  "linkText": "{link} to show more information"\n} as const;\n\ntype I18nJson = typeof i18nJson;\ntype I18nKey = keyof I18nJson;\ntype LineBreakFormat = `${string}\\n${string}`;\ntype ValuesType = string | number | ReactElement;\n\ntype ValueFormat<\n  Key extends string = string,\n  Suffix extends string = string,\n> = `${string}{${Key}}${Suffix}`\n\ntype ValuesKeyArray<I18nText extends string> =\n  I18nText extends ValueFormat<infer Key, infer Suffix>\n  ? [Key, ...ValuesKeyArray<Suffix>] : [];\n\ntype ValuesKeyUnion<I18nText extends string> =\n  ValuesKeyArray<I18nText>[number];\n\ntype TFunction = <\n  Key extends I18nKey,\n  Params extends I18nJson[Key] extends ValueFormat\n    ?  [Record<ValuesKeyUnion<I18nJson[Key]>, ValuesType>] : [undefined?],\n>(\n  key: Key,\n  ...values: Params\n) => I18nJson[Key] extends LineBreakFormat\n  // highlight-start\n  ? ReactElement\n    : I18nJson[Key] extends ValueFormat\n      ? Params extends [Record<string, string | number>]\n        ? string : ReactElement\n  // highlight-end\n  : string;\n\nconst tFunction: TFunction = (key, ...values) => i18nJson[key] as any;\n\nconst oneValue = tFunction(\'oneValue\', { value1: \'$500\' }); // string\nconst twoValue = tFunction(\'twoValue\', { value1: \'$500\', value2: 3 }); // string\n// highlight-start\nconst linkText = tFunction(\'linkText\', { link: <a href="/about">{tFunction(\'link\')}</a> }) // ReactElement\n// highlight-end\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDejUYCiANkiEgHbwC+cAZlBCHAORQEwsDcAUD2hAoBneMACMADgoApIYLgBeXDzhwARIKQA1FMQCuSNQC51AFQAWwIXDCMAJnoxwruAG66DY6gDo1mFeowAO4QOvqGJmoWLrYQDk4uOO7hXnAoFHbO8EHAxMRwAEZIcHZIxMCuSOyZKHQwVW4eSABMtHYoAJ5CfgFq5RQA1sbqaOVoQ-6qfcCDpkgAHjDDajj9A7QwEHBC5hBBcCDQxTN00CAoMMCCajy0KNYCwjC8PDAdYMUAkpIychSKcDeHwgdGcP1kgl4QK+PwA0kgOgCBgiQXBvlIIRQoe9igAZGZIABC7BQAwAYmcLgCAAYAEhwIigMwA5tQADoUemMlnUanYj5wMIGISmHEA7kUZlwAA+cAoehARSgMvw6BgJDIlGefGhgqaFKg5xgAB54YiFvUMtYJVKlDbsABlPR0OjAeZwC2UOzWmBMyXi30sgB8NK5gcl1Bw9LN1Go9KdLrdvNeYqFSCEZoAglAoJ1jeiKHNFh7Fl6fX7mSGlAWi-BPVa9eEDUbjScGmbsG3lQnXfMQwB+OAAbQ7cG847TGYR2dzHWNPbdQYAunATEOl-zipOzQBVChXCj5n61kuW73bcOVgHb6c5vM1i1BofyxVVDc6sWmMl6CgYA8A00EVPMs0ThBFsAABRQXMQGsetzwLTERwRFd4OsNNmypQdh2QAQoDsY0bw6PcDyPDE-mQjolyDbBJ1FD5l1XYcf1KV0KCQOx+2ogAKAJkQ6EwOwCcdvGSYUTCgmChB4ABKRQQ0QiizVQ0sG3xdjiVQclKXgHhB2QNUNXIKg4ACExFMESiVLPdD9R00zVFUQdJJQWDgIbIdcOgAj7QvCsVRfJVGMHG0mIMohSGMmAzL8lkXkeERAW-X9LkEEwvx-P95CUbj+OwESxPTOSFBDcRyMs-iV3uNIKA6eLBESzQ0wBGBkqyihuJYJqmhYbA8EKsQTBYWkAFYAAYxpYOBqBkrg4AAenm2LJX4Br4GCUImhatrUo6lgNrTXrcDgAahtGiajsK5oTAAZmm2aFqWm1VqeOA1hPJRWsy3bOvei0jrwNYTGNFA4HMdg6AUNR5pQAoID0JYgxwL6UoPX6ZgGFgZOoY0YZDGbHtVCLNSoHggA"},"plaground")),(0,i.kt)("p",null,"In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"ValueFormat")," in L35-L37, if condition is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"Record<string, string | number>"),",\nand if a type other than string and number is used as a variable, it can be confirmed that it is inferred as ReactElement like L44."),(0,i.kt)("p",null,"In this way, the variable type can be specified not only for the array but also for the object."))}m.isMDXComponent=!0}}]);